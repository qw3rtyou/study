***데이터 모델링***
    데이터 모델링
        데이터 모델이란, 다양한 데이터 요소들을 이해하고 사용하기 편한 형태로 정리해놓은 모형
        
        저장하고자 하는 데이터에서 Entity, Attribute, Relationship, Constraint 파악
        우리가 데이터를 저장하려고 하는 대상: Entity(개체)
        Entity에 대해서 저장하려고 하는 특징: Attribute(속성)
        Entity들 사이 생기는 연결점: Relationship(관계)
        여러 데이터 요소들에 있는 규칙: Constraint(제약 조건)
        
        이 네 가지 요소들을 파악한 후, 이 내용들을 발전시켜 데이터 모델들을 만드는 과정을 데이터 모델링
	
    릴레이셔널 모델
        릴레이션은 데이터를 로우와 컬럼으로 정리한 테이블, 또는 표를 의미
        Entity는 테이블, attribute은 컬럼, relationship은 foreign key를 사용해서 정리해놓은 모형
        릴레이셔널 모델을 모델링한다는 건, 정확히 어떤 테이블을 만들고, 
        이 테이블들을 또 어떤 컬럼들로 나누고,foreign key를 어떻게 만들지를 정해나가는 것
        
        
    ERM(Entity-Relationship 모델)
        모델링을 할 때는 로우에 대해서 신경을 쓰지 않기 때문에 
        데이터를 조금 다른 형태로 표현하는 모델을 같이 사용
        ERM에서는 로우를 매번 표현해주지 않아도 되고
        선과 선의 끝점들을 통해서 Entity들 사이 관계를 조금 더 자세하게 표현할 수 있음
        
        Entity를 하나의 네모
        attribute을 네모 안에 문자열
        relationship을 선으로 표현
        선들의 끝을 어떻게 표현하는지에 따라 관계의 특징을 표현
        
        
    데이터 모델 스펙트럼
        데이터 모델은 얼마나 자세하게 표현됐는지에 따라 세 가지로 분류
        
            개념 모델
                가장 추상적인 내용을 담고 있는 모델을 개념 모델
                대략적으로 Entity들과 Entity들 사이에 있는 관계 정도만 표현
                
            논리 모델
                개념 모델보다는 조금 더 자세한 내용을 담고있음
                
                    Entity들이 갖는 Attribute들과 primary key, 
                    Entity들 사이 관계를 표현해줄 foreign key
                
                이런 내용까지 표현
                
            물리 모델
                물리 모델은 실제로 데이터베이스를 구축할 때 필요한 내용에 
                최대한 가까운 내용을 담고 있는 모델
                
                    각 컬럼의 데이터 타입, 요소들의 이름, 
                    나중에 배울 인덱스라는 걸 어디에 만들어줄 건지...
                
                이런 내용까지 표현
                
                
                
***논리적 모델링***    
    비즈니스 룰
        비즈니스 룰은 특정 조직이 운영되기 위해 따라야 하는 정책, 절차, 원칙에 대한 간단 명료한 설명
        
        모든 명사는 Entity 후보
        모든 동사는 Relationship 후보
        하나의 "값"으로 표현할 수 있는 명사는 attribute의 후보
        하나의 값으로 표현할 수 있더라도, 
        하나의 entity가 여러 개의 값을 가져야 하는 경우 
        새로운 테이블(entity)을 만드는게 좋음
        
    
    카디널리티
        카디널리티는 두 entity type 사이 관계에서 한 종류의 entity가 
        다른 종류의 entity 몇 개에 대해서 관계를 맺을 수 있는지를 나타내는 개념
        
        1:1 관계
        1:N 관계
        1:N 관계
        
        최대 카디털리
        최소 카디널리티
        
        https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4416&directory=Screen_Shot_2021-02-19_at_5.12.02_PM.png&name=Screen_Shot_2021-02-19_at_5.12.02_PM.png
        https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4416&directory=Screen_Shot_2021-02-19_at_5.13.54_PM.png&name=Screen_Shot_2021-02-19_at_5.13.54_PM.png
        https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4416&directory=Screen_Shot_2021-02-19_at_5.14.28_PM.png&name=Screen_Shot_2021-02-19_at_5.14.28_PM.png
        https://bakey-api.codeit.kr/api/files/resource?root=static&seqId=4416&directory=Screen_Shot_2021-02-19_at_5.14.48_PM.png&name=Screen_Shot_2021-02-19_at_5.14.48_PM.png
        
        ERD
            ERM을 가끔씩 Entity Relationship Diagram, 줄여서 ERD라고 표현하기도 함
        
        
    관계모델링
        1:1 관계 모델링
            두 Entity 사이에 1:1 관계가 있을 때는 둘 중 하나, 
            또는 둘 다에 foreign key를 추가해서 모델링
            
        1:N 관계 모델링
            Entity와 Entity 사이에 1:N 관계가 있을 때는 항상 다, 
            즉 관계에서 다수 쪽에 해당하는 entity에 foreign key를 만들어줌
            
        M:N 관계 모델링
            M:N 관계는 두 entity 또는 테이블만 사용해서 자연스럽게 표현할 수 없음
            그렇기 때문에 관계를 저장하기 위한 테이블인 
            연결 테이블 (junction table)이란 걸 사용
            연결 테이블에는 각 테이블의 forign key를 만들어줌
            즉, 새로운 테이블에 forign key 2개가 담겨져있음
            
            
    ERM은 데이터베이스 구조를 만들어낼 때 뿐만 아니라, 
    이미 사용하고 있는 데이터베이스를 파악하는데 사용할 수 있음
    
    
    
***정규화***
    1NF
        나눌 수 없는 단일 값
        모든 칸에 하나의 데이터만 있어야함
        하나의 컬럼을 여러개로 나누거나
        같은 속성을 나타내는 컬럼을 분리해서 새로운 테이블을 만들면됨
        당연히 후자가 좋음 왜냐하면       
        NULL이 많이 생길 수 있게 된다
        컬럼을 몇 개를 만들어야 되는지 애매해진다
        조회가 비효율적이게 된다
        
        
        
***백업파일 생성과 복원***
    mysqldump -utest_user -p'test123' test_db > test_db_backup.sql
    mysql -utest_user -p'test123' dev_db < test_db_backup.sql 


        
***TIP***
	*(와일드카드)는 모두를 뜻함
	WHERE NULL = NULL 은 True를 리턴하지 않음

	쿼리 끝에 세미콜론 붙이기
	예약어는 항상 대문자로 해주는게 좋음(=안해도됨)

	schema랑 database랑 비슷함
	entry랑 row랑 비슷함

	change 명령을 통해 내가 사용하고자 하는 db를 선택할 순있지만
	table은 그렇지 않다. 따라서 

		ALTER TABLE player_info
        		CHANGE role postion VARCHAR(2) NOT NULL;

    이런 명령어를 사용할 때 table 이름을 적어주는 것이다.
	
	
	
	
	
	
	
	
	
	
	