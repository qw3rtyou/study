***Position***
	position 속성으로 위치의 기준을 잡고
	top bottom right left 이런 속성으로 구체적인 위치를 잡는다.

    static
    	position 속성의 기본 값
    	원래 있어야할 위치에 배치
    	일반적인 글의 흐름을 따른다.


    relative
    	상대적인 이라는 뜻
    	원래 있어야 될 곳을 기준으로 함
    		
    		position: relative;
    		top: 30px;

    	margin이랑 다른 점은 position은 딱 그 요소만 이동하고
    	margin은 모든 요소가 이동한다.


    absolute
     	포지셔닝이 된 가장 가까운 조상 요소를 기준으로 함
     	즉 static이면 안됨

     		position: absolute;
     		bottom: 40px;

     	포지셔닝이 되야지만 선택됨 안되있으면 그 조상을 찾음

     	absolute 는 자리를 차지하지 않은 것 처럼 됨
     	즉 두 요소가 나란히 있고 첫번째 요소가 나오고 
     	두번째 요소가 나오는게 일반적인 흐름이라면
     	첫번째 요소에 absolute를 주고 두번째에 안줬다면
     	두번째는 첫번째 자리에 있을 것이다.

     	absolute 포지션은 width 옵션을 주지 않으면
     	block 요소더라도 content의 크기 만큼 크기를 가짐 

     	조상 요소의 크기를 덮고 싶다면

     		top: 0;
     		bottom: 0;
     		left: 0;
     		right: 0;

     	이렇게 하면 된다. 더 간결한 방법은 다음과 같다.

     		inset: 0;

     	또, 조상 요소로 부터 일정한 간격을 주려면 다음과 같다.

     		inset: 10px;


   	fixed
   		브라우저 화면 기준으로 고정된 위치를 가짐
   		스크롤을 하더라도 원래 위치에 있고
   		absolute처럼 자리를 차지하지 않은 판정임
   		기본 너비는 content의 크기임

   		네비게이션 바같은 효과를 내려면 다음과 같이 사용하면 된다.

   			width: 100%;
   			position: fixed;
   			top: 0;
   			left: 0;

   		그런데 이렇게 사용하면 본문과 네비게이션이 겹칠 수 있다.
   		body 태그나 본문 태그에 margin을 넣으면 해결될 것이다.


   	sticky
   		일단 기본적으로 원래 있어야할 위치에 배치된다.
   		fixed처럼 브라우저 화면 기준으로 위치를 정하는데
   		처음엔 static하게 움직이다가 브라우저 화면 기준으로
   		설정한 위치에 도달하면 fixed하게 움직인다.
   		그러다가 기준 밖으로 다시 나가면 원래대로 static으로
   		전환된다.

   		sticky는 자리를 차지하는 판정이다

   		네비게이션 바같은 효과를 내려면 다음과 같이 사용하면 된다.

   			width: 100%;
   			position: sticky;
   			top: 0;
   			heigth: 60px;

   		sticky는 부모 요소 안에 갇혀 있음
   		즉 부모 요소가 화면 밖에 나가면 자기 자신도 나감


   	z-index
   		코드상 아래에 나오는 요소가 브라우저에선 앞에서 보임
   		z-index 속성을 설정해주면 나오는 순서를 설정해줄 수 있음

   			z-index: 1;

   		z-index 의 값이 높을수록 더 앞에 있는 요소임

   		두 요소의 z-index값이 같다면 코드상 아래에 나오는게 앞으로 나옴

   		모든 정수(음수 양수 0)를 취할 수 있음

   		쌓임 맥락
   			z-index가 원하는 대로 동작하지 않을 때가 있다.
   			대부분의 경우는 쌓임 맥락 때문이다.
   			다음과 같은 예시가 있다고 하자

				<div class="red">
				  <div class="green"></div>
				</div>
				<div class="blue"></div>

				.red {
				  background-color: #e46e80;
				  position: absolute;
				  width: 100px;
				  height: 100px;
				  top: 100px;
				  left: 100px;
				  z-index: 1;
				}

				.green {
				  background-color: #32b9c1;
				  position: absolute;
				  width: 50px;
				  height: 50px;
				  top: 25px;
				  left: 25px;
				  z-index: 3;
				}

				.blue {
				  background-color: #5195ee;
				  position: absolute;
				  width: 100px;
				  height: 100px;
				  top: 150px;
				  left: 150px;
				  z-index: 2;
				}

			z-index 순서만 고려한다면 초록 파랑 빨강 순으로 나올 것 같지만
			실제론 파랑 초록 빨강 순으로 나온다.
			html코드를 확인하면 빨강 div 안에 초록 div가 있다.
			따라서 초록 입장에서 관계없는 파랑은 z-index 값을 별개로 적용되는 것이다.
			이러한 일련의 맥락을 쌓임 맥락이라고 한다.



***flexbox***
	flexbox는 일차원 방향으로 배치를 할 때 유용하다

	배치할 방향 flex-direction
	정렬하기 justify-content, align-items
	요소가 넘칠 때 flex-wrap
	요소 간격 gap
	크기 늘이거나 줄이기 flex-grow, flex-shrink, flex-basis

	배치방향
		display 속성을 flex로 설정하면
		flex-direction 속성의 값이 row로 설정되어 있을 것이다.
		가로 방향으로 요소들이 배치되는 것이다

		반대로 세로 방향으로 배치하려면
		flex-direction 속성의 값을 column 으로 설정해주면 된다.

		추가적으로 방향을 반대로 하려면 column-reverse, row-reverse
		등을 사용하면 된다.


	정렬하기
		flex-direction 속성으로 요소의 방향을 설정할 수 있다.

		기본축(Main Axis)
			요소가 배치되는 방향

		교차축(Cross Axis)
			기본축에 수직 방향

		만약 flex-direction의 값이 column이라면
		기본축은 위에서 아래방향이다.

		기본적으로 요소들은 기본축 방향으로 순서대로 배치되고
		교차축 방향으로 꽉 채워서 배치한다


		크롬 개발자 도구에서 display: flex 오른쪽 아이콘을 클릭해보면 
		빠르게 설정을 변경할 수 있다.
		
		flex요소에서 다음과 같은 속성을 주로 이용한다.


			flex-direction
				위에서 언급했듯이 요소들이 배치되는 방향
				아래에서 설명하는 요소들은 flex-direction이 row라고 가정하고 설명했다.

			justify-content
				기본축 기준으로 설정

				flex-start: 기본값 가장 왼쪽에 정렬

				flex-right: 가장 오른쪽에 정렬

				center: 가운데 배치

				space-around, space-even: 요소마다 간격을 두고 배치

			align-item
				교차축 기준으로 설정

				stretch: 기본값 최대 크기를 차지함

				center: 가운데 정렬, 최대 크기를 차치하는 것이 아닌 
					요소의 크기만큼 공간을 차지함

				flex-end: 맨 아래에 정렬

				flex-start: 맨 위로 정렬












