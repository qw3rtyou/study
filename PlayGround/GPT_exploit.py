import Cython

cpdef size_t GetStrLen(char *input):
    cdef size_t local_18
    cdef char *local_10

    local_18 = 0
    for local_10 in input:
        if local_10 == '\0':
            break
        local_18 += 1
    return local_18

cpdef void XORWithParam2(char *input, char *param_2):
    cdef size_t sVar1
    cdef int local_14

    sVar1 = GetStrLen(param_2)
    for local_14 in range(0x20):
        input[local_14] = param_2[local_14 % sVar1] ^ input[local_14]

cpdef void IncWithParam2(char *input, char param_2):
    cdef int local_c

    for local_c in range(0x20):
        input[local_c] = param_2 + input[local_c]

cpdef void DecWithParam2(char *input, char param_2):
    cdef int local_c

    for local_c in range(0x20):
        input[local_c] = input[local_c] - param_2

cpdef void Decode(char *encoded):
    XORWithParam2(encoded, b"\x11\x33\x55\x77\x99\xbb\xdd")
    DecWithParam2(encoded, -13)
    IncWithParam2(encoded, 77)
    XORWithParam2(encoded, b"\xef\xbe\xad\xde")
    IncWithParam2(encoded, 90)
    DecWithParam2(encoded, 31)
    XORWithParam2(encoded, b"\xde\xad\xbe\xef")

data = bytearray(b"\xf8\xe0\xe6\x9e\x7f\x32\x68\x31\x05\xdc\xa1\xaa\xaa\x09"
                 b"\xb3\xd8\x41\xf0\x36\x8c\xce\xc7\xac\x66\x91\x4c\x32\xff\x05"
                 b"\xe0\xd9\x91")

Decode(data)
print("Decoding result:", data.decode("utf-8"))